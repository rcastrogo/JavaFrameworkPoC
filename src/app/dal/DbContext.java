package app.dal;

import java.io.Closeable;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import com.microsoft.sqlserver.jdbc.SQLServerDriver;

import app.utils.Utils;

public class DbContext implements Closeable {
	
  Connection conn = null; 
  String dbURL    = "jdbc:sqlserver://DESKTOP-MCSK9K9:1433;databaseName=TOLEDO;user=sa;password=Rcastro#";
  
  static {
    try {
    	DriverManager.registerDriver(new SQLServerDriver());
    } catch (SQLException ex) {
    	Utils.getLogger().error(ex);
    }  	
  }

	public DbContext(){
    try {
			conn = DriverManager.getConnection(dbURL);
			Utils.getLogger().log("Connetion.open: %1$d", conn.hashCode());
    } catch (SQLException ex) {
    	Utils.getLogger().error(ex);;
    }		
	}
	
  public ResultSet executeNamedQuery(String name) throws SQLException {
		//Utils.getLogger().log("executeNamedQuery: " + name);
		String query = NamedQueriesManager.getNamedQuery(name);
    return executeQuery(query);
	}
	
	public ResultSet executeNamedQuery(String name, Integer id) throws SQLException {
		//Utils.getLogger().log("executeNamedQuery: " + name);
		String query = NamedQueriesManager.getNamedQuery(name);
    return executeQuery(query + " WHERE Id = " + id.toString());
	}

	public ResultSet executeQuery(String sqlQuery) throws SQLException {
		Utils.getLogger().log(sqlQuery);
		return createCommand().executeQuery(sqlQuery);
	}
	
	public Object executeNamedScalar(String name){
		return executeScalar(NamedQueriesManager.getNamedQuery(name));
	}
	
	public Object executeScalar(String sql){
		try( ResultSet dataReader = executeQuery(sql) ){
			if (dataReader.next() ) {  
        return dataReader.getObject(1);  
      }
		} catch (SQLException e) {
			Utils.getLogger().error(e);
		}
		return 0;			
	}
	
	public int executeNamedUpdate(String name, Object[] values){
		String sql = NamedQueriesManager.getNamedQuery(name);
		try( PreparedStatement cmd = prepareStatement(conn, sql, Statement.NO_GENERATED_KEYS, values) ){
			Integer rows = cmd.executeUpdate();
			Utils.getLogger().log(rows + " rows affected");
		  return rows;
		} catch (SQLException e) {
			Utils.getLogger().error(e);
			return 0;			
		}
	}

	public int executeNamedInsert(String name, Object[] values){
		String sql = NamedQueriesManager.getNamedQuery(name);
		try( PreparedStatement cmd = prepareStatement(conn, sql, Statement.RETURN_GENERATED_KEYS, values) ){
			Integer affectedRows = cmd.executeUpdate();
			Utils.getLogger().log(affectedRows + " rows affected");
			if (affectedRows != 0) {
				ResultSet generatedKeys = cmd.getGeneratedKeys();
				if (generatedKeys.next()) {
					return generatedKeys.getInt(1);
				}
			}
		  return -1;
		} catch (SQLException e) {
			Utils.getLogger().error(e);
			return 0;			
		}
	}

	private Statement createCommand() throws SQLException {
		return conn.createStatement();
	}

	private static PreparedStatement prepareStatement(Connection connection, String sql, int autoGeneratedKeys, Object... values) throws SQLException {
		PreparedStatement preparedStatement = connection.prepareStatement(sql, autoGeneratedKeys );
      for (int i = 0; i < values.length; i++) {
				Object value = values[i];
				if(value == null){
					preparedStatement.setNull(i + 1, java.sql.Types.NULL);
				}else{
					preparedStatement.setObject(i + 1, value);
				}
			}
			String logSql = String.format(sql.replace("?", "%s"),  values);
			Utils.getLogger().log(logSql);
			return preparedStatement;
  }

	private boolean closing = false; /* To avoid recursive closing */
	/**
	 * Close the DbContext
	 */
	@Override
	public void close() {
		synchronized (this) {
			if (! closing) {
				closing = true;
				try {
					if (conn != null && !conn.isClosed()) {
						Utils.getLogger().log("Connetion.close: %1$d", conn.hashCode());
						conn.close();
					}
				} catch (SQLException ex) {
					Utils.getLogger().error(ex);
				}	
				conn = null;
			}
		}
	}	
	
}